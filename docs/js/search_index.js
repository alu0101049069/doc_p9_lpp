var search_data = {"index":{"searchIndex":["alimentos","comida","error","lista","node","object","platoa","platon","<=>()","<=>()","<=>()","each()","each()","energiaplato()","extraer_cabeza()","extraer_cola()","huellacarbono()","huellanut()","indiceenergiaplato()","indicehuellacarbono()","initalize()","insertar()","insertar_varios()","new()","new()","new()","new()","porc_glucidos()","porc_lipidos()","porc_proteinas()","to_s()","to_se()","to_str()","valoreng()","vct()","code_of_conduct","gemfile","gemfile.lock","guardfile","license","readme","rakefile","setup","comida.gemspec"],"longSearchIndex":["alimentos","comida","comida::error","lista","node","object","platoa","platon","alimentos#<=>()","platoa#<=>()","platon#<=>()","lista#each()","platon#each()","platon#energiaplato()","lista#extraer_cabeza()","lista#extraer_cola()","platon#huellacarbono()","platon#huellanut()","platon#indiceenergiaplato()","platon#indicehuellacarbono()","platoa#initalize()","lista#insertar()","lista#insertar_varios()","alimentos::new()","lista::new()","node::new()","platon::new()","platon#porc_glucidos()","platon#porc_lipidos()","platon#porc_proteinas()","alimentos#to_s()","platon#to_se()","platoa#to_str()","alimentos#valoreng()","platon#vct()","","","","","","","","",""],"info":[["Alimentos","","Alimentos.html","","<p>clase que representa un conjunto de alimentos y sus propiedades\n"],["Comida","","Comida.html","","<p>modulo estándar de la gema\n<p>modulo que contiene la versión del código\n"],["Comida::Error","","Comida/Error.html","","<p>Clase error\n<p>redirecciona los errores\n"],["Lista","","Lista.html","","<p>clase que representa una lista de nodos\n"],["Node","","Node.html","","<p>clase que reprensenta un nodo\n"],["Object","","Object.html","",""],["PlatoA","","PlatoA.html","","<p>clase que hereda de la clase PlatoN\n"],["PlatoN","","PlatoN.html","","<p>clase que representa los platos de alimentos de un menu\n"],["<=>","Alimentos","Alimentos.html#method-i-3C-3D-3E","(otro_alimentos)","<p>se hace uso de la función para poder comparar alimentos en base a sus\nemisiones\n"],["<=>","PlatoA","PlatoA.html#method-i-3C-3D-3E","(otro_plato)","<p>se crea la función para comparar las huellas de ambos platos\n"],["<=>","PlatoN","PlatoN.html#method-i-3C-3D-3E","(otro_plato)","<p>se crea la función para comparar las huellas de los platos\n"],["each","Lista","Lista.html#method-i-each","()","<p>se declara una función para que sea comparable la lista\n<p>se apunta a la cabeza de la lista y se recorren …\n"],["each","PlatoN","PlatoN.html#method-i-each","()","<p>se crea la función para poder acceder a las funciones de enumerable\n<p>se apunta a la cabeza de la lista …\n"],["energiaplato","PlatoN","PlatoN.html#method-i-energiaplato","()","<p>se calcula la energia de un plato\n<p>se recorre la lista de alimentos y se accede al atributo energía\n<p>se hace …\n"],["extraer_cabeza","Lista","Lista.html#method-i-extraer_cabeza","()","<p>se extrae la cabeza de la lista\n<p>se crea un auxiliar que se iguala a la cabeza\n<p>la cabeza se pone en le siguiente …\n"],["extraer_cola","Lista","Lista.html#method-i-extraer_cola","()","<p>se extrae la cola de la lista\n<p>se crea un auxiliar que se iguala a la cola\n<p>la cola se pone en le siguiente …\n"],["huellacarbono","PlatoN","PlatoN.html#method-i-huellacarbono","()","<p>se calcula la huella de carbono de un plato\n<p>se recorre la lista de alimentos y se accede al atributo huellacarbono …\n"],["huellanut","PlatoN","PlatoN.html#method-i-huellanut","()","<p>se calcula la huella nutricional de un alimento\n<p>se llama a los índices de energía y huella de carbono …\n"],["indiceenergiaplato","PlatoN","PlatoN.html#method-i-indiceenergiaplato","()","<p>se calcula el indice de energía de un plato\n<p>se compara el rango entre los que pueden estar los valores …\n"],["indicehuellacarbono","PlatoN","PlatoN.html#method-i-indicehuellacarbono","()","<p>se calcula el indice de huella de carbono de un plato\n<p>se compara el rango entre los que pueden estar los …\n"],["initalize","PlatoA","PlatoA.html#method-i-initalize","(co2, m2)","<p>se inicializan los atributos\n"],["insertar","Lista","Lista.html#method-i-insertar","(value)","<p>se inserta un elemento en la lista\n<p>se crea un nuevo nodo con el valor a insertar\n<p>se comprueba si la cabeza …\n"],["insertar_varios","Lista","Lista.html#method-i-insertar_varios","(*vec)","<p>se insertan varios elementos\n<p>se recorre el vector de elementos a insertar\n<p>se llama a la función insertar …\n"],["new","Alimentos","Alimentos.html#method-c-new","(nombre,proteinas,glucidos,lipidos,gei,terreno,energia,huellacar)","<p>se inicializan los atributos de la clase\n"],["new","Lista","Lista.html#method-c-new","(cabeza: nil, cola: nil)","<p>se inicilaizan los atributos y se pone la longitud a 0\n"],["new","Node","Node.html#method-c-new","(value: nil, prev: nil, sig: nil)","<p>se inicializan los atributos de la clase\n"],["new","PlatoN","PlatoN.html#method-c-new","(nombre,listali,listagr,precio)","<p>se define initialize con los atributos para llamar a new\n"],["porc_glucidos","PlatoN","PlatoN.html#method-i-porc_glucidos","()","<p>se calcula el porcentaje de glucidos de un alimento\n<p>se recorre la lista de alimentos y se accede al valor …\n"],["porc_lipidos","PlatoN","PlatoN.html#method-i-porc_lipidos","()","<p>se calcula el porcentaje de lipidos de un alimento\n<p>se recorre la lista de alimentos y se accede al valor …\n"],["porc_proteinas","PlatoN","PlatoN.html#method-i-porc_proteinas","()","<p>se calcula el porcentaje de proteinas de un alimento\n<p>se recorre la lista de alimentos y se accede al valor …\n"],["to_s","Alimentos","Alimentos.html#method-i-to_s","()","<p>se pasa a string cada alimento y sus propiedades\n<p>se hace uso de los operadores # y {} sobre cada atributo …\n\n"],["to_se","PlatoN","PlatoN.html#method-i-to_se","()","<p>se pasa a string el contenido de un plato\n<p>se recorre el plato y se llama al método to_s de ruby\n\n"],["to_str","PlatoA","PlatoA.html#method-i-to_str","()","<p>se pasa a string el valor energético\n<p>se recorre la lista y se llama la la función to_s de ruby\n\n"],["valoreng","Alimentos","Alimentos.html#method-i-valoreng","()","<p>se calcula el valor energético de un alimento\n<p>se multiplican los respectivos atributos y se suman\n\n"],["vct","PlatoN","PlatoN.html#method-i-vct","()","<p>se calcula el valor energético de los alimentos de un plato\n<p>se recorre la lista y se accede al valor energético …\n\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org” gemspec\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  comida (0.1.0)</pre>\n<p>GEM\n"],["Guardfile","","Guardfile.html","","<p># A sample Guardfile # More info at github.com/guard/guard#readme\n<p>## Uncomment and set this to only include …\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2019 Eduardo García Tímermans\n<p>Permission is hereby granted, free of …\n"],["README","","README_md.html","","<p>Author\n<p>Eduardo García Tímermans\nPráctica 6\n<p>Comida\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require “rspec/core/rake_task”\n<p>RSpec::Core::RakeTask.new …\n"],["setup","","bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$&#39;nt&#39; set -vx\n<p>bundle install\n<p># Do any other automated …\n"],["comida.gemspec","","comida_gemspec.html","","<p>lib = File.expand_path(“lib”, __dir__) $LOAD_PATH.unshift(lib) unless\n$LOAD_PATH.include?(lib) …\n"]]}}